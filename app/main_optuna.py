# main_optuna.py
import os
from data_pipeline import setup_tensorflow, create_data_pipeline, get_class_weights_from_dataset
from optuna_optimizer import (run_optuna_optimization, create_final_model, 
                            train_final_model, evaluate_model, visualize_optuna_results)
from visualization import (plot_training_history, safe_confusion_matrix_analysis, 
                         test_random_predictions_modern)

def main():
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞
    setup_tensorflow()
    
    # –ü—É—Ç–∏
    IMAGE_PATH = "/home/oleg/projects/datasets/construction"
    print(f"–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∞–ø–∫–∏: {os.listdir(IMAGE_PATH)}")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–π–ø–ª–∞–π–Ω–∞
    train_data, validation_data, train_data_raw, class_names, num_classes = create_data_pipeline(
        image_path=IMAGE_PATH,
        height=224,
        width=224, 
        batch_size=32
    )
    
    # –†–∞—Å—á–µ—Ç –≤–µ—Å–æ–≤ –∫–ª–∞—Å—Å–æ–≤
    print("üéØ –†–∞—Å—á–µ—Ç –≤–µ—Å–æ–≤ –∫–ª–∞—Å—Å–æ–≤...")
    class_weights = get_class_weights_from_dataset(train_data_raw, class_names)
    
    # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è Optuna
    study = run_optuna_optimization(
        train_data=train_data,
        validation_data=validation_data,
        num_classes=num_classes,
        model_name='EfficientNetV2S',
        n_trials=20
    )
    
    # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ Optuna
    visualize_optuna_results(study)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏
    best_model = create_final_model(study, num_classes)
    
    # –û–±—É—á–µ–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏
    final_history = train_final_model(
        model=best_model,
        train_data=train_data,
        validation_data=validation_data,
        class_weights=class_weights,
        epochs=70
    )
    
    # –û—Ü–µ–Ω–∫–∞ –º–æ–¥–µ–ª–∏
    val_loss, val_accuracy = evaluate_model(best_model, validation_data, "trained_optuna_model")
    
    # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    plot_training_history(final_history)
    safe_confusion_matrix_analysis(best_model, validation_data, class_names)
    test_random_predictions_modern(best_model, validation_data, class_names)
    
    print("üéâ –í–°–ï –ó–ê–î–ê–ß–ò –í–´–ü–û–õ–ù–ï–ù–´!")

if __name__ == "__main__":
    main()
    